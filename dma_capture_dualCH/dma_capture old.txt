//includes
#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/adc.h"
#include "hardware/dma.h"
#include "pico/multicore.h"
#include "hardware/pio.h"
#include "resistor_dac.pio.h"
//FFT
#include "kiss_fftr.h"

// Channel 0 is GPIO26
#define CAPTURE_CHANNEL 0
#define CAPTURE_CHANNEL2 1
#define CAPTURE_DEPTH 4096
#define LED_PIN 25
#define TIMING_TEST 15

//globals
uint8_t capture_buf[CAPTURE_DEPTH];
float freqs[CAPTURE_DEPTH];
uint dma_chan;
//functions
void setup();
void sample();


int main(void) {
    stdio_init_all();
    setup();

    //configuring FFT
    kiss_fft_scalar fft_in[CAPTURE_DEPTH];
    kiss_fft_cpx fft_out[CAPTURE_DEPTH];
    kiss_fftr_cfg FFTcfg = kiss_fftr_alloc(CAPTURE_DEPTH,false,0,0);


    while(1){
        sample();
        for (int i=0;i<CAPTURE_DEPTH;i++) {
            fft_in[i]=(float)capture_buf[i];
            //printf("Reading value: %f \n", fft_in[i]);
        }
    
        // compute fast fourier transform
        //gpio_put(TIMING_TEST, 1);
        kiss_fftr(FFTcfg , fft_in, fft_out);
        //gpio_put(TIMING_TEST, 0);

        // Determining main frequency component
        float max_power = 0;
        int max_idx = 0;
        //basically just find which frequency bin has the greatest power
        for (int i = 1; i < CAPTURE_DEPTH/2; i++) {
            float power = fft_out[i].r*fft_out[i].r+fft_out[i].i*fft_out[i].i;
            if (power>max_power) {
	            max_power=power;
	            max_idx = i;
            } 
        }
        //frequency corresponding to that bin
        float max_freq = freqs[max_idx];
        //print result
        printf("Greatest Frequency Component: %0.1f Hz\n",max_freq);
        sleep_ms(1000);
    }
}
  

void sample()
{
    //DMA setup
    sleep_ms(1000);
    dma_channel_config cfg = dma_channel_get_default_config(dma_chan);
    // reads from the same address (ADC result) and puts it at an incrementing address
    channel_config_set_transfer_data_size(&cfg, DMA_SIZE_8);
    channel_config_set_read_increment(&cfg, false);
    channel_config_set_write_increment(&cfg, true);

    // Pace transfers based on availability of ADC samples
    channel_config_set_dreq(&cfg, DREQ_ADC);

    dma_channel_configure(dma_chan, &cfg,
        capture_buf,    // dst
        &adc_hw->fifo,  // src
        CAPTURE_DEPTH,  // transfer count
        true            // start immediately
    );

    //gpio_put(TIMING_TEST, 1);

    adc_run(true);
    //wait for DMA to capture enough samples, stop the ADC and flush the fifo
    dma_channel_wait_for_finish_blocking(dma_chan);
    //gpio_put(TIMING_TEST, 0);
    //printf("Capture finished\n");
    adc_run(false);
    adc_fifo_drain();
}

void setup()
{
    // claiming the DMA channel here, configuring it in the sample function
    //this prevents us from running out of DMA channels which causes the program to stop
    dma_chan = dma_claim_unused_channel(true);
    
    //initialize pins
    gpio_init(TIMING_TEST);
    gpio_set_dir(TIMING_TEST, GPIO_OUT);

    //ADC init
    adc_gpio_init(26 + CAPTURE_CHANNEL);
    adc_init();
    adc_select_input(CAPTURE_CHANNEL);
    adc_fifo_setup(
        true,    // Write each completed conversion to the sample FIFO
        true,    // Enable DMA data request (DREQ)
        1,       // DREQ (and IRQ) asserted when at least 1 sample present
        false,   // We won't see the ERR bit because of 8 bit reads; disable.
        true     // Shift each sample to 8 bits when pushing to FIFO
    );

   //sets sampling speed
   //speed is 48MHz/1200 (CPUfreq)/(clkdiv) = 40,000
    adc_set_clkdiv(1200);

    //calculating FFT frequency bins
    float f_max = 40000;
    float f_res = f_max / CAPTURE_DEPTH;
    for (int i = 0; i < CAPTURE_DEPTH; i++) {freqs[i] = f_res*i;}
}



    





